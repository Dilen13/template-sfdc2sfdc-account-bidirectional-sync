<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:batch="http://www.mulesoft.org/schema/mule/batch" xmlns:objectstore="http://www.mulesoft.org/schema/mule/objectstore"
	xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:sfdc="http://www.mulesoft.org/schema/mule/sfdc"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/sfdc http://www.mulesoft.org/schema/mule/sfdc/current/mule-sfdc.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/objectstore http://www.mulesoft.org/schema/mule/objectstore/current/mule-objectstore.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd" version="EE-3.5.0">
    
    <batch:job name="syncBatch" >
        <batch:threading-profile poolExhaustedAction="WAIT"/>
        <batch:input>
            <logger message="yyyyyyyyyyy" level="INFO" doc:name="Logger"/>
        </batch:input>
        <batch:process-records>
            
            <batch:step name="getAccountInBStep" accept-expression="'A'.equals(flowVars['sourceSystem'])">
                <enricher source="#[payload]" target="#[recordVars['accountInTargetInstance']]" doc:name="store account">
	            	<sfdc:query-single config-ref="SalesforceB" query="SELECT Id, Name, LastModifiedDate FROM Account WHERE (Name = '#[payload['Name']]')" doc:name="query account from B"/>
                </enricher>
            </batch:step>
            
            <batch:step name="upsertAccountInBStep" accept-expression="'A'.equals(flowVars['sourceSystem']) &amp;&amp; (true || recordVars['accountInTargetInstance'] is NullPayload || recordVars['accountInTargetInstance'].get('LastModifiedDate') &lt; payload.get('LastModifiedDate') &amp;&amp; '${sfdc.a.integration.user.id}' != payload.get('LastModifiedById'))">
				<expression-component doc:name="prepare account for upsert"><![CDATA[if(!(payload['NumberOfEmployees'] == null)) {
	payload.put('NumberOfEmployees', Integer.parseInt(payload['NumberOfEmployees']));
}

payload.remove('OwnerId');

if(recordVars['accountInTargetInstance'] is NullPayload) {
	payload.remove('Id');
	payload.remove('LastModifiedById');
	payload.remove('LastModifiedDate');
} else {
	payload.put('Id',recordVars['accountInTargetInstance'].get('Id'));
	payload.remove('LastModifiedById');
	payload.remove('LastModifiedDate');
}		]]></expression-component>
                <batch:commit size="200" doc:name="Batch Commit">
                    <logger message="#[payload]" level="INFO" doc:name="Logger"/>
			        <sfdc:upsert config-ref="SalesforceB" externalIdFieldName="Id" type="Account" doc:name="upsert account in B">
			            <sfdc:objects ref="#[payload]"/>
			        </sfdc:upsert>
			        <logger message="Upsert Salesforce response: #[payload]" level="INFO" doc:name="log response"/>
                </batch:commit>
            </batch:step>
            
            <batch:step name="getAccountInAStep" accept-expression="'B'.equals(flowVars['sourceSystem'])">
                <enricher source="#[payload]" target="#[recordVars['accountInTargetInstance']]" doc:name="store account">
		            <sfdc:query-single config-ref="SalesforceA" query="SELECT Id, Name, LastModifiedDate FROM Account WHERE (Name = '#[payload['Name']]')" doc:name="query account from A"/>
                </enricher>
            </batch:step>
            
            <batch:step name="upsertAccountInAStep" accept-expression="'B'.equals(flowVars['sourceSystem']) &amp;&amp; (recordVars['accountInTargetInstance'] is NullPayload || recordVars['accountInTargetInstance'].get('LastModifiedDate') &lt; payload.get('LastModifiedDate') &amp;&amp; '${sfdc.b.integration.user.id}' != payload.get('LastModifiedById'))">
                <logger message="333333333333333 #[payload]" level="INFO" doc:name="Logger"/>
				<expression-component doc:name="prepare account for upsert"><![CDATA[if(!(payload['NumberOfEmployees'] == null)) {
	payload.put('NumberOfEmployees', Integer.parseInt(payload['NumberOfEmployees']));
}

payload.remove('OwnerId');

if(recordVars['accountInTargetInstance'] is org.mule.transport.NullPayload) {
	payload.remove('Id');
	payload.remove('LastModifiedById');
	payload.remove('LastModifiedDate');
} else {
	payload.put('Id',recordVars['accountInTargetInstance'].get('Id'));
	payload.remove('LastModifiedById');
	payload.remove('LastModifiedDate');
}
				]]></expression-component>
                <batch:commit size="200" doc:name="Batch Commit">
                    <logger message="#[payload]" level="INFO" doc:name="Logger"/>
			        <sfdc:upsert config-ref="SalesforceA" externalIdFieldName="Id" type="Account" doc:name="upsert account in A">
			            <sfdc:objects ref="#[payload]"/>
			        </sfdc:upsert>
			        <logger message="Upsert Salesforce response: #[payload]" level="INFO" doc:name="log response"/>
                </batch:commit>
            </batch:step>
            
        </batch:process-records>
        <batch:on-complete>
            <logger message="xxxxxxxx" level="INFO" doc:name="Logger"/>
        </batch:on-complete>
    </batch:job>
    
</mule>
