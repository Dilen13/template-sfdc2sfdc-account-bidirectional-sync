<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:batch="http://www.mulesoft.org/schema/mule/batch" xmlns:sfdc="http://www.mulesoft.org/schema/mule/sfdc" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:spring="http://www.springframework.org/schema/beans" version="EE-3.6.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/sfdc http://www.mulesoft.org/schema/mule/sfdc/current/mule-sfdc.xsd">
    

     <batch:job name="fromSalesforceBtoSalesforceABatch" max-failed-records="1">
        <batch:threading-profile poolExhaustedAction="WAIT"/>
        <batch:process-records>
            <batch:step name="forEachAccountInSalesforceAGetAccountFromSalesforceBStep">
                <enricher doc:name="store Salesforce account in var 'accountInTargetInstance'" >
                    <sfdc:query-single config-ref="SalesforceA" query="SELECT Id, Name, LastModifiedDate FROM Account WHERE (Name = '#[payload['Name']]')" doc:name="Salesforce"/>
                    <enrich source="payload" target="recordVars['accountInTargetInstance']"/>
                </enricher>
            </batch:step>
            <batch:step name="forEachAccountToBeUpsertedInSalesforceB" accept-expression="recordVars['accountInTargetInstance'] is NullPayload ? true : ((org.mule.templates.date.DateUtils.ISOStringDateToDateTime(payload['LastModifiedDate']).isAfter(org.mule.templates.date.DateUtils.ISOStringDateToDateTime(recordVars['accountInTargetInstance']['LastModifiedDate']))) &amp;&amp; ('${sfdc.b.integration.user.id}' != payload.get('LastModifiedById')))">
                <expression-component doc:name="prepare account for upsert"><![CDATA[if(!(payload['NumberOfEmployees'] == null)) {
	payload.put('NumberOfEmployees', Integer.parseInt(payload['NumberOfEmployees']));
}

if(recordVars['accountInTargetInstance'] is NullPayload) {
	payload.remove('Id');
	payload.remove('LastModifiedById');
	payload.remove('LastModifiedDate');
	payload.remove('OwnerId');
} else {
	payload.put('Id',recordVars['accountInTargetInstance'].get('Id'));
	payload.remove('LastModifiedById');
	payload.remove('LastModifiedDate');
	payload.remove('OwnerId');
}		]]></expression-component>

                <batch:commit size="200" doc:name="Batch Commit">
                    <logger level="INFO" doc:name="Logger" message="Payload to upload in Salesforce A: #[payload]"/>
                    <sfdc:upsert config-ref="SalesforceA" externalIdFieldName="Id" type="Account" doc:name="Salesforce">
                        <sfdc:objects ref="#[payload]"/>
                    </sfdc:upsert>
                    <logger level="INFO" doc:name="Logger" message="Upsert in Salesforce instance A response: #[payload]"/>
                </batch:commit>
            </batch:step>
        </batch:process-records>
        <batch:on-complete>
            <expression-component doc:name="release lock"><![CDATA[app.registry['PollSynchronizer'].unlock();]]></expression-component>
        </batch:on-complete>
    </batch:job>
    <batch:job name="fromSalesforceAtoSalesforceBBatch" max-failed-records="1">
        <batch:threading-profile poolExhaustedAction="WAIT"/>
        <batch:process-records>
            <batch:step name="forEachAccountInSalesforceBGetAccountFromSalesforceAStep">
                <enricher doc:name="Message Enricher">
                    <sfdc:query-single config-ref="SalesforceB" query="SELECT Id, Name, LastModifiedDate FROM Account WHERE (Name = '#[payload['Name']]')" doc:name="Salesforce"/>
                    <enrich source="payload" target="recordVars['accountInTargetInstance']"/>
                </enricher>
            </batch:step>
            <batch:step name="forEachAccountToBeUpsertedInSalesforceA" accept-expression="recordVars['accountInTargetInstance'] is NullPayload ? true : ((org.mule.templates.date.DateUtils.ISOStringDateToDateTime(payload['LastModifiedDate']).isAfter(org.mule.templates.date.DateUtils.ISOStringDateToDateTime(recordVars['accountInTargetInstance']['LastModifiedDate']))) &amp;&amp; ('${sfdc.a.integration.user.id}' != payload.get('LastModifiedById')))">
                <expression-component doc:name="prepare account for upsert"><![CDATA[if(!(payload['NumberOfEmployees'] == null)) {
	payload.put('NumberOfEmployees', Integer.parseInt(payload['NumberOfEmployees']));
}

if(recordVars['accountInTargetInstance'] is NullPayload) {
	payload.remove('Id');
	payload.remove('LastModifiedById');
	payload.remove('LastModifiedDate');
	payload.remove('OwnerId');
} else {
	payload.put('Id',recordVars['accountInTargetInstance'].get('Id'));
	payload.remove('LastModifiedById');
	payload.remove('LastModifiedDate');
	payload.remove('OwnerId');
}		]]></expression-component>
                <batch:commit doc:name="Batch Commit" size="200">
                    <sfdc:upsert config-ref="SalesforceB" externalIdFieldName="Id" type="Account" doc:name="Salesforce">
                        <sfdc:objects ref="#[payload]"/>
                    </sfdc:upsert>
                    <logger message="Upsert in Salesforce instance B response: #[payload]" level="INFO" doc:name="Logger"/>
                </batch:commit>
            </batch:step>
        </batch:process-records>
        <batch:on-complete>
            <expression-component doc:name="release lock"><![CDATA[app.registry['PollSynchronizer'].unlock();]]></expression-component>
        </batch:on-complete>
    </batch:job>
</mule>
